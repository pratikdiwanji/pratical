import heapq
class node:
    def __init__(self, freq, symbol, left=None, right=None):
# frequency of symbol
        self.freq = freq
# symbol name (character)
        self.symbol = symbol
# node left of current node
        self.left = left
# node right of current node
        self.right = right
# tree direction (0/1)
        self.huff = ''
    def __lt__(self, nxt):
        return self.freq < nxt.freq
def printNodes(node, val=''):
    newVal = val + str(node.huff)
    if(node.left):
        printNodes(node.left, newVal)
    if(node.right):
        printNodes(node.right, newVal)
    if(not node.left and not node.right):
        print(f"{node.symbol} -> {newVal}")
chars = ['a', 'e','i','o','u','s','t']
freq = [10, 15, 12, 3, 4, 13, 1]
nodes = []
for x in range(len(chars)):
    heapq.heappush(nodes, node(freq[x], chars[x]))
while len(nodes) > 1:
    left = heapq.heappop(nodes)
    right = heapq.heappop(nodes)
    left.huff = 0
    right.huff = 1
    newNode = node(left.freq+right.freq, left.symbol+right.symbol, left, right)
    heapq.heappush(nodes, newNode)
print("charactres:",chars)
print("frequency",freq)
printNodes(nodes[0])
